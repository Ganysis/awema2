// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ========== USER MANAGEMENT ==========

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  clients          Client[]
  projects         Project[]
  contentVersions  ContentVersion[]
  activityLogs     ActivityLog[]
  sessions         Session[]
  
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@map("sessions")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
  CLIENT
}

// ========== CLIENT MANAGEMENT ==========

model Client {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String?
  address     String?
  city        String?
  postalCode  String?
  country     String   @default("France")
  
  // Business info
  companyName String?
  siret       String?
  vatNumber   String?
  website     String?
  
  // Metadata
  status      ClientStatus @default(ACTIVE)
  notes       String?
  tags        String?      // JSON array stored as string
  message     String?      // Message from initial form submission
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  creator     User?    @relation(fields: [createdBy], references: [id])
  
  // Relations
  projects    Project[]
  leads       Lead[]
  invoices    Invoice[]
  formLinks   FormLink[]
  templateProposals TemplateProposal[]
  
  @@index([email])
  @@index([status])
  @@map("clients")
}

enum ClientStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
}

// ========== PROJECT MANAGEMENT ==========

model Project {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  
  // Configuration
  template    String
  domain      String?
  subdomain   String?
  customDomain String?
  
  // Status
  status      ProjectStatus @default(DRAFT)
  publishedAt DateTime?
  
  // SEO
  seoTitle       String?
  seoDescription String?
  seoKeywords    String?  // JSON array stored as string
  ogImage        String?
  
  // Analytics
  googleAnalyticsId String?
  googleTagManagerId String?
  
  // Features
  features    String   @default("{}")  // JSON stored as string
  settings    String   @default("{}")  // JSON stored as string
  data        String?  // Editor data (pages, blocks, etc.) stored as JSON
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdBy   String?
  creator     User?    @relation(fields: [createdBy], references: [id])
  
  contents    Content[]
  contentVersions ContentVersion[]
  media       Media[]
  leads       Lead[]
  analytics   Analytics[]
  activityLogs ActivityLog[]
  
  @@index([slug])
  @@index([clientId])
  @@index([status])
  @@map("projects")
}

enum ProjectStatus {
  DRAFT
  REVIEW
  PUBLISHED
  MAINTENANCE
  ARCHIVED
}

// ========== CONTENT MANAGEMENT ==========

model Content {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  section   String   // hero, about, services, etc.
  data      String   // Flexible JSON content stored as string
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  versions  ContentVersion[]
  
  @@unique([projectId, section])
  @@index([projectId])
  @@map("contents")
}

model ContentVersion {
  id        String   @id @default(cuid())
  contentId String
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  version   Int
  data      String   // JSON stored as string
  changes   String?  // Description of changes
  
  createdAt DateTime @default(now())
  createdBy String?
  creator   User?    @relation(fields: [createdBy], references: [id])
  
  @@index([contentId])
  @@index([projectId])
  @@map("content_versions")
}

// ========== MEDIA MANAGEMENT ==========

model Media {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  filename  String
  url       String
  publicUrl String?
  mimeType  String
  size      Int
  width     Int?
  height    Int?
  
  // Optimization
  thumbnailUrl String?
  optimizedUrl String?
  alt          String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@map("media")
}

// ========== LEAD MANAGEMENT ==========

model Lead {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  
  // Contact info
  name      String
  email     String
  phone     String?
  message   String?
  
  // Source tracking
  source    String?  // google, facebook, direct, etc.
  medium    String?  // organic, cpc, referral, etc.
  campaign  String?
  
  // Page info
  page      String?
  formId    String?
  
  // Status
  status    LeadStatus @default(NEW)
  score     Int?       @default(0)
  notes     String?
  
  // Metadata
  ip        String?
  userAgent String?
  metadata  String?  // JSON stored as string
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([projectId])
  @@index([email])
  @@index([status])
  @@map("leads")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

// ========== ANALYTICS ==========

model Analytics {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  date      DateTime
  
  // Metrics
  pageViews Int      @default(0)
  visitors  Int      @default(0)
  sessions  Int      @default(0)
  bounceRate Float?
  avgDuration Int?   // in seconds
  
  // Sources
  sources   String?  // JSON: {google: 100, facebook: 50, direct: 200}
  pages     String?  // JSON: {"/": 150, "/services": 100}
  devices   String?  // JSON: {desktop: 200, mobile: 150}
  locations String?  // JSON: {FR: 300, US: 50}
  
  createdAt DateTime @default(now())
  
  @@unique([projectId, date])
  @@index([projectId])
  @@index([date])
  @@map("analytics")
}

// ========== ACTIVITY LOG ==========

model ActivityLog {
  id        String   @id @default(cuid())
  
  action    String   // created, updated, deleted, published, etc.
  entity    String   // project, content, lead, etc.
  entityId  String
  
  details   String?  // JSON stored as string
  ip        String?
  userAgent String?
  
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([projectId])
  @@index([entity, entityId])
  @@index([createdAt])
  @@map("activity_logs")
}

// ========== BILLING (Optional) ==========

model Invoice {
  id        String   @id @default(cuid())
  number    String   @unique
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id])
  
  amount    Float
  tax       Float    @default(0)
  total     Float
  currency  String   @default("EUR")
  
  status    InvoiceStatus @default(DRAFT)
  dueDate   DateTime
  paidAt    DateTime?
  
  items     String   // JSON: [{description, quantity, unitPrice, total}]
  notes     String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([clientId])
  @@index([status])
  @@map("invoices")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// ========== TEMPLATES ==========

model Template {
  id          String   @id @default(cuid())
  name        String
  description String?
  category    String   // plombier, electricien, etc.
  
  // Template structure
  blocks      String   // JSON array of blocks configuration
  theme       String   // JSON theme configuration
  
  // Template properties
  tags        String?  // JSON array for filtering: modern, classic, urgency, etc.
  score       Float    @default(0) // Quality/relevance score
  
  // Metadata
  metadata    String?  // JSON: performance, accessibility, seoScore, etc.
  
  // Usage tracking
  usageCount  Int      @default(0)
  lastUsedAt  DateTime?
  
  // Status
  isActive    Boolean  @default(true)
  isPublic    Boolean  @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([category])
  @@index([isActive])
  @@map("templates")
}

// ========== TEMPLATE PROPOSALS ==========

model TemplateProposal {
  id          String   @id @default(cuid())
  clientId    String
  client      Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // Form data used for selection
  formData    String   // JSON of the form submission
  
  // AI Analysis results (visible only to admin)
  aiAnalysis  String?  // JSON: {suggestions, scoring, reasoning}
  
  // Selected templates (3 options)
  option1     String?  // JSON: {templateId, customizations, adminNotes}
  option2     String?  // JSON: {templateId, customizations, adminNotes}
  option3     String?  // JSON: {templateId, customizations, adminNotes}
  
  // Admin customization
  adminNotes  String?  // Notes for personalizing the presentation
  customMessage String? // Personalized message to client
  
  // Status
  status      ProposalStatus @default(PENDING)
  selectedOption Int?     // Which option client selected (1, 2, or 3)
  
  // Timestamps
  createdAt   DateTime @default(now())
  analyzedAt  DateTime? // When AI analysis was done
  proposedAt  DateTime? // When sent to client
  selectedAt  DateTime? // When client made selection
  
  @@index([clientId])
  @@index([status])
  @@map("template_proposals")
}

enum ProposalStatus {
  PENDING      // Form submitted, waiting for AI analysis
  ANALYZED     // AI has generated suggestions
  CUSTOMIZING  // Admin is customizing proposals
  PROPOSED     // Sent to client
  SELECTED     // Client has selected an option
  CONFIRMED    // Selection confirmed and project started
}

// ========== FORM LINKS ==========

model FormLink {
  id        String   @id @default(cuid())
  uniqueId  String   @unique @default(cuid())
  
  // Relation to client (optional, can be created after form submission)
  clientId  String?
  client    Client?  @relation(fields: [clientId], references: [id])
  
  // Form configuration
  name      String   // Internal name for tracking
  description String? // Notes about why this form was created
  
  // Status and validity
  status    FormLinkStatus @default(ACTIVE)
  expiresAt DateTime?
  maxUses   Int?     @default(1) // null = unlimited
  
  // Tracking
  views     Int      @default(0)
  started   Int      @default(0) // Number of times form was started
  completed Int      @default(0) // Number of times form was completed
  
  // Form data
  formData  String?  // JSON of partially/fully completed form
  completedAt DateTime?
  
  // Metadata
  metadata  String?  // JSON for custom data
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy String?
  
  // Relations
  formSubmissions FormSubmission[]
  
  @@index([uniqueId])
  @@index([status])
  @@index([clientId])
  @@map("form_links")
}

enum FormLinkStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  CANCELLED
}

model FormSubmission {
  id        String   @id @default(cuid())
  formLinkId String
  formLink  FormLink @relation(fields: [formLinkId], references: [id], onDelete: Cascade)
  
  // Submission data
  data      String   // Full JSON form data
  step      Int      // Which step they reached
  completed Boolean  @default(false)
  
  // Tracking
  ip        String?
  userAgent String?
  sessionId String?  // To track partial submissions
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([formLinkId])
  @@index([sessionId])
  @@map("form_submissions")
}