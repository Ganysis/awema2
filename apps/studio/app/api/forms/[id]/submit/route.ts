import { NextRequest, NextResponse } from 'next/server'
import { formLinkService } from '@/lib/db/services/form-link.service'
import { ClientService } from '@/lib/db/services/client.service'
import { ProjectService } from '@/lib/db/services/project.service'
import { emailService } from '@/lib/email/email.service'
import { z } from 'zod'
import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

const submitSchema = z.object({
  formData: z.any(), // We'll validate this more thoroughly later
  sessionId: z.string().optional(),
})

export async function POST(
  req: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    console.log('Form submission started for ID:', params.id)
    const { id: uniqueId } = params
    
    // Validate form link
    const validity = await formLinkService.checkValidity(uniqueId)
    if (!validity.isValid) {
      return NextResponse.json(
        { error: validity.reason },
        { status: 400 }
      )
    }
    
    // Get form link details
    const formLink = await formLinkService.getByUniqueId(uniqueId)
    if (!formLink) {
      return NextResponse.json(
        { error: 'Form not found' },
        { status: 404 }
      )
    }
    
    // Parse request body
    const body = await req.json()
    const { formData, sessionId } = submitSchema.parse(body)
    
    // Get IP and User Agent
    const ip = req.headers.get('x-forwarded-for') || 
               req.headers.get('x-real-ip') || 
               'unknown'
    const userAgent = req.headers.get('user-agent') || 'unknown'
    
    // Create form submission record
    await formLinkService.createSubmission({
      formLinkId: formLink.id,
      data: formData,
      step: 8, // Assuming all 8 steps completed
      completed: true,
      ip,
      userAgent,
      sessionId,
    })
    
    // Mark form link as completed
    await formLinkService.markAsCompleted(uniqueId, formData)
    
    // Create or update client
    let client
    if (formLink.clientId) {
      // Update existing client
      client = await ClientService.update(formLink.clientId, {
        name: formData.businessName,
        email: formData.email,
        phone: formData.phone,
        address: formData.address,
        city: formData.city,
        postalCode: formData.postalCode,
        companyName: formData.businessName,
        siret: formData.siret,
      })
    } else {
      // Try to find existing client by email first
      const existingClient = await prisma.client.findUnique({
        where: { email: formData.email }
      })
      
      if (existingClient) {
        // Use existing client and update their info
        client = await ClientService.update(existingClient.id, {
          name: formData.businessName,
          phone: formData.phone,
          address: formData.address,
          city: formData.city,
          postalCode: formData.postalCode,
          companyName: formData.businessName,
          siret: formData.siret,
          status: 'NEW', // Reset status to NEW for new lead
          // message: formData.message || formData.additionalInfo, // Removed - not in UpdateClientInput
        })
      } else {
        // Create new client
        client = await ClientService.create({
          name: formData.businessName,
          email: formData.email,
          phone: formData.phone,
          address: formData.address,
          city: formData.city,
          postalCode: formData.postalCode,
          companyName: formData.businessName,
          siret: formData.siret,
          status: 'NEW',
          // message: formData.message || formData.additionalInfo, // Removed - not in UpdateClientInput
        })
      }
      
      // Link the form to the client
      await formLinkService.update(formLink.id, { clientId: client.id })
    }
    
    // Generate slug from business name
    const baseSlug = formData.businessName
      .toLowerCase()
      .replace(/[^a-z0-9]+/g, '-')
      .replace(/(^-|-$)/g, '');
    const slug = await ProjectService.generateUniqueSlug(baseSlug);
    
    // Create project with the form data
    const project = await ProjectService.create({
      name: `Site web ${formData.businessName}`,
      slug,
      clientId: client.id,
      template: formData.businessType || 'electricien',
      data: JSON.stringify({
        formData,
        generatedAt: new Date().toISOString(),
        autoGenerated: true,
      }),
    })
    
    // Send notification email
    try {
      await emailService.sendFormSubmissionNotification({
        formLink,
        formData,
        client,
        project,
      })
    } catch (emailError) {
      console.error('Failed to send email notification:', emailError)
      // Don't fail the request if email fails
    }
    
    return NextResponse.json({
      success: true,
      clientId: client.id,
      projectId: project.id,
      redirectUrl: `/editor/${project.id}`,
    })
    
  } catch (error) {
    console.error('Form submission error:', error)
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack')
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Invalid form data', details: error.errors },
        { status: 400 }
      )
    }
    
    const errorMessage = error instanceof Error ? error.message : 'Failed to submit form'
    
    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    )
  }
}