#!/usr/bin/env node

const { NetlifyAPI } = require('@netlify/api');

// Configuration
const NETLIFY_TOKEN = process.env.NETLIFY_AUTH_TOKEN || process.env.NETLIFY_TOKEN;
const SITE_NAME = 'test-debug-1752151506356';

if (!NETLIFY_TOKEN) {
  console.error('‚ùå Erreur: NETLIFY_AUTH_TOKEN ou NETLIFY_TOKEN non d√©fini');
  process.exit(1);
}

async function checkDeployment() {
  try {
    const client = new NetlifyAPI(NETLIFY_TOKEN);
    
    console.log('üîç Recherche du site:', SITE_NAME);
    
    // Lister tous les sites
    const sites = await client.listSites();
    const site = sites.find(s => s.name === SITE_NAME);
    
    if (!site) {
      console.log('‚ùå Site non trouv√©');
      console.log('\nüìã Sites disponibles:');
      sites.slice(0, 5).forEach(s => {
        console.log(`  - ${s.name}: ${s.url}`);
      });
      return;
    }
    
    console.log('\n‚úÖ Site trouv√©:');
    console.log('  ID:', site.id);
    console.log('  Nom:', site.name);
    console.log('  URL:', site.url);
    console.log('  SSL URL:', site.ssl_url);
    console.log('  Admin URL:', site.admin_url);
    console.log('  Cr√©√© le:', new Date(site.created_at).toLocaleString());
    console.log('  Mis √† jour le:', new Date(site.updated_at).toLocaleString());
    console.log('  √âtat:', site.state);
    
    // R√©cup√©rer les derniers d√©ploiements
    console.log('\nüì¶ Derniers d√©ploiements:');
    const deploys = await client.listSiteDeploys({
      site_id: site.id,
      per_page: 5
    });
    
    if (deploys.length === 0) {
      console.log('  Aucun d√©ploiement trouv√©');
    } else {
      deploys.forEach((deploy, index) => {
        console.log(`\n  D√©ploiement #${index + 1}:`);
        console.log('    ID:', deploy.id);
        console.log('    √âtat:', deploy.state);
        console.log('    Cr√©√© le:', new Date(deploy.created_at).toLocaleString());
        console.log('    Publi√© le:', deploy.published_at ? new Date(deploy.published_at).toLocaleString() : 'Non publi√©');
        console.log('    URL de d√©ploiement:', deploy.deploy_ssl_url || deploy.deploy_url);
        console.log('    Contexte:', deploy.context);
        console.log('    Branche:', deploy.branch);
        
        if (deploy.error_message) {
          console.log('    ‚ùå Erreur:', deploy.error_message);
        }
        
        if (deploy.summary) {
          console.log('    üìä R√©sum√©:', JSON.stringify(deploy.summary, null, 2));
        }
      });
    }
    
    // V√©rifier les fichiers du dernier d√©ploiement
    if (deploys.length > 0 && deploys[0].state === 'ready') {
      console.log('\nüìÑ V√©rification des fichiers du dernier d√©ploiement...');
      try {
        const deployFiles = await client.getDeploy({
          deploy_id: deploys[0].id
        });
        
        console.log('  Nombre de fichiers:', deployFiles.file_count || 'Non disponible');
        console.log('  Taille totale:', deployFiles.file_size ? `${(deployFiles.file_size / 1024 / 1024).toFixed(2)} MB` : 'Non disponible');
      } catch (error) {
        console.log('  ‚ö†Ô∏è  Impossible de r√©cup√©rer les d√©tails des fichiers');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur:', error.message);
    if (error.response) {
      console.error('D√©tails:', error.response.data);
    }
  }
}

checkDeployment();