#!/usr/bin/env node

/**
 * Test du workflow complet Netlify
 */

console.log('üîÑ Test workflow complet Netlify...\n');

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

// Charger les variables d'environnement
const envPath = path.join(__dirname, '..', '.env.local');
if (fs.existsSync(envPath)) {
  const envContent = fs.readFileSync(envPath, 'utf8');
  envContent.split('\n').forEach(line => {
    if (line && !line.startsWith('#') && line.includes('=')) {
      const [key, ...valueParts] = line.split('=');
      process.env[key.trim()] = valueParts.join('=').trim();
    }
  });
}

async function testWorkflow() {
  try {
    if (typeof fetch === 'undefined') {
      global.fetch = require('node-fetch');
    }
    
    const { NetlifyAPI } = await import('@netlify/api');
    const client = new NetlifyAPI(process.env.NETLIFY_AUTH_TOKEN);
    
    const timestamp = Date.now();
    const siteName = `test-workflow-${timestamp}`;
    
    console.log('üÜï Test avec site:', siteName);
    
    // 1. Cr√©er le site
    console.log('\n1Ô∏è‚É£ Cr√©ation du site...');
    const site = await client.createSite({
      body: { name: siteName }
    });
    console.log('‚úÖ Site cr√©√©:', site.id);
    
    // 2. Pr√©parer les fichiers
    console.log('\n2Ô∏è‚É£ Pr√©paration des fichiers...');
    const files = {
      'index.html': `<!DOCTYPE html>
<html>
<head>
    <title>Test Workflow ${timestamp}</title>
    <meta charset="UTF-8">
    <style>
        body { 
            font-family: Arial; 
            padding: 40px; 
            text-align: center;
            background: #f0f0f0;
        }
        .success {
            background: white;
            padding: 40px;
            border-radius: 10px;
            display: inline-block;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { color: #4CAF50; }
    </style>
</head>
<body>
    <div class="success">
        <h1>‚úÖ D√©ploiement R√©ussi!</h1>
        <p>Site: ${siteName}</p>
        <p>Timestamp: ${timestamp}</p>
        <p>Date: ${new Date().toISOString()}</p>
    </div>
</body>
</html>`,
      'test.txt': 'Fichier de test',
      'data.json': JSON.stringify({ test: true, timestamp }, null, 2)
    };
    
    console.log('üìÑ Fichiers pr√©par√©s:', Object.keys(files).join(', '));
    
    // 3. Cr√©er le d√©ploiement avec files directement
    console.log('\n3Ô∏è‚É£ Cr√©ation du d√©ploiement...');
    
    // Calculer les SHA pour chaque fichier
    const fileShas = {};
    Object.entries(files).forEach(([path, content]) => {
      const sha = crypto.createHash('sha1').update(content).digest('hex');
      fileShas[path] = sha;
    });
    
    console.log('üîê SHAs calcul√©s:', fileShas);
    
    try {
      // M√©thode 1: createSiteDeploy avec files et fonctions requises
      const deploy = await client.createSiteDeploy({
        site_id: site.id,
        body: {
          files: files,
          async: false, // D√©ploiement synchrone
          functions: {} // Pas de fonctions
        }
      });
      
      console.log('‚úÖ D√©ploiement cr√©√©:', deploy.id);
      console.log('   √âtat:', deploy.state);
      console.log('   Requis:', deploy.required || 'Aucun');
      console.log('   Requis functions:', deploy.required_functions || 'Aucune');
      
      // Si des fichiers sont requis, les uploader
      if (deploy.required && deploy.required.length > 0) {
        console.log('\n4Ô∏è‚É£ Upload des fichiers requis...');
        for (const sha of deploy.required) {
          // Trouver le fichier correspondant au SHA
          const filePath = Object.entries(fileShas).find(([_, s]) => s === sha)?.[0];
          if (filePath && files[filePath]) {
            console.log(`   Upload ${filePath} (${sha})...`);
            try {
              await client.uploadDeployFile({
                deploy_id: deploy.id,
                path: filePath,
                body: files[filePath]
              });
              console.log(`   ‚úÖ ${filePath} upload√©`);
            } catch (uploadError) {
              console.error(`   ‚ùå Erreur upload ${filePath}:`, uploadError.message);
            }
          }
        }
      }
      
    } catch (deployError) {
      console.error('‚ùå Erreur m√©thode 1:', deployError.message);
      
      // M√©thode 2: D√©ploiement en 2 √©tapes
      console.log('\nüîÑ Tentative m√©thode 2: d√©ploiement en 2 √©tapes...');
      
      // √âtape 1: Cr√©er un d√©ploiement vide
      const deploy2 = await client.createSiteDeploy({
        site_id: site.id,
        body: {}
      });
      
      console.log('üì¶ D√©ploiement vide cr√©√©:', deploy2.id);
      
      // √âtape 2: Uploader chaque fichier
      for (const [filePath, content] of Object.entries(files)) {
        console.log(`   Upload ${filePath}...`);
        try {
          await client.uploadDeployFile({
            deploy_id: deploy2.id,
            path: filePath,
            body: Buffer.from(content)
          });
          console.log(`   ‚úÖ ${filePath} upload√©`);
        } catch (uploadError) {
          console.error(`   ‚ùå Erreur:`, uploadError.message);
        }
      }
    }
    
    // 5. V√©rifier le d√©ploiement
    console.log('\n5Ô∏è‚É£ V√©rification apr√®s 15 secondes...');
    await new Promise(resolve => setTimeout(resolve, 15000));
    
    // R√©cup√©rer les d√©ploiements du site
    const deploys = await client.listSiteDeploys({ site_id: site.id });
    console.log(`\nüìã ${deploys.length} d√©ploiements trouv√©s:`);
    deploys.slice(0, 3).forEach(d => {
      console.log(`   - ${d.id}: ${d.state} (${new Date(d.created_at).toLocaleString()})`);
    });
    
    // V√©rifier le site
    const finalSite = await client.getSite({ site_id: site.id });
    console.log('\nüåê √âtat final du site:');
    console.log('   √âtat:', finalSite.state);
    console.log('   URL:', finalSite.url);
    console.log('   SSL:', finalSite.ssl_url);
    console.log('   Dernier d√©ploiement:', finalSite.published_deploy?.id);
    
    // Test d'acc√®s
    console.log('\n6Ô∏è‚É£ Test d\'acc√®s final...');
    const response = await fetch(finalSite.ssl_url || finalSite.url);
    console.log('   Status:', response.status);
    
    if (response.ok) {
      const html = await response.text();
      console.log('   ‚úÖ Succ√®s! HTML re√ßu:', html.length, 'caract√®res');
      console.log('   Contenu correct:', html.includes(siteName) ? 'OUI' : 'NON');
      
      // Sauvegarder pour debug
      fs.writeFileSync('test-output-workflow.html', html);
      console.log('   HTML sauv√© dans test-output-workflow.html');
    } else {
      console.log('   ‚ùå Erreur:', response.status, response.statusText);
    }
    
  } catch (error) {
    console.error('\n‚ùå Erreur:', error);
    console.error('Message:', error.message);
    if (error.response?.data) {
      console.error('Response:', error.response.data);
    }
  }
}

testWorkflow();