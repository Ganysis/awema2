#!/usr/bin/env node

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugDataFlow() {
  try {
    console.log('üîç Analyse du flux de donn√©es...\n');

    // 1. R√©cup√©rer le dernier projet
    const project = await prisma.project.findFirst({
      where: { name: { contains: 'COMPLET' } },
      orderBy: { createdAt: 'desc' }
    });

    if (!project) {
      console.log('‚ùå Aucun projet trouv√©');
      return;
    }

    console.log('üìã Projet trouv√©:', project.name);
    console.log('   ID:', project.id);

    // 2. Analyser les donn√©es stock√©es
    const projectData = JSON.parse(project.data);
    console.log('\nüì¶ Structure des donn√©es stock√©es:');
    console.log('   Type:', typeof projectData);
    console.log('   Cl√©s principales:', Object.keys(projectData));

    // 3. Examiner un bloc sp√©cifique (content-ultra-modern)
    const contentBlock = projectData.pages[0].blocks.find(b => b.type === 'content-ultra-modern');
    if (contentBlock) {
      console.log('\nüîé Bloc content-ultra-modern trouv√©:');
      console.log('   Props keys:', Object.keys(contentBlock.props));
      console.log('   contentType:', contentBlock.props.contentType);
      console.log('   content type:', typeof contentBlock.props.content);
      console.log('   content value:', contentBlock.props.content);
      console.log('   timeline type:', typeof contentBlock.props.timeline);
      console.log('   timeline value:', JSON.stringify(contentBlock.props.timeline, null, 2));
    }

    // 4. Examiner le bloc contact
    const contactBlock = projectData.pages[0].blocks.find(b => b.type === 'contact-ultra-modern');
    if (contactBlock) {
      console.log('\nüîé Bloc contact-ultra-modern trouv√©:');
      console.log('   contactInfo type:', typeof contactBlock.props.contactInfo);
      console.log('   contactInfo value:', JSON.stringify(contactBlock.props.contactInfo, null, 2));
      console.log('   formFields type:', typeof contactBlock.props.formFields);
      console.log('   formFields length:', contactBlock.props.formFields?.length);
      console.log('   formFields[0]:', JSON.stringify(contactBlock.props.formFields?.[0], null, 2));
    }

    // 5. V√©rifier la cha√Æne de rendu
    console.log('\n‚öôÔ∏è  Test de rendu direct:');
    
    // Charger le module de rendu
    const path = require('path');
    const templatePath = path.join(__dirname, '../../../packages/templates/dist/index.js');
    console.log('   Chemin templates:', templatePath);
    
    try {
      const { renderContentUltraModern } = require(templatePath);
      
      if (contentBlock) {
        console.log('\n   Test avec les props actuelles:');
        const result = renderContentUltraModern(contentBlock.props, []);
        console.log('   Type de r√©sultat:', typeof result);
        console.log('   A un HTML:', !!result.html);
        console.log('   HTML contient [object Object]:', result.html?.includes('[object Object]'));
        
        // Chercher o√π appara√Æt [object Object]
        if (result.html?.includes('[object Object]')) {
          const match = result.html.match(/(.{50})\[object Object\](.{50})/);
          if (match) {
            console.log('   Contexte du [object Object]:', match[0]);
          }
        }
      }
    } catch (error) {
      console.log('   ‚ùå Erreur lors du chargement du module:', error.message);
    }

    // 6. V√©rifier comment l'API retourne les donn√©es
    console.log('\nüåê Test via l\'API:');
    const fetch = require('node-fetch');
    
    try {
      const response = await fetch(`http://localhost:3000/api/projects/${project.id}`);
      const apiData = await response.json();
      
      if (apiData.success && apiData.data.data) {
        const apiContentBlock = apiData.data.data.pages[0].blocks.find(b => b.type === 'content-ultra-modern');
        if (apiContentBlock) {
          console.log('   content type via API:', typeof apiContentBlock.props.content);
          console.log('   timeline type via API:', typeof apiContentBlock.props.timeline);
        }
      }
    } catch (error) {
      console.log('   ‚ö†Ô∏è  API non accessible');
    }

  } catch (error) {
    console.error('‚ùå Erreur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugDataFlow();