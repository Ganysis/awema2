#!/usr/bin/env node

/**
 * Script pour tester le rendu des blocs V3
 */

console.log('üß™ Test du rendu des blocs V3...\n');

try {
  // Importer les modules n√©cessaires
  const { getBlockRenderFunction, getBlockById } = require('../lib/blocks/block-registry');
  
  // Tester le Hero V3
  console.log('1. Test du Hero V3 Perfect:');
  const heroRenderFn = getBlockRenderFunction('hero-v3-perfect');
  
  if (!heroRenderFn) {
    console.log('‚ùå Fonction de rendu non trouv√©e pour hero-v3-perfect');
  } else {
    console.log('‚úÖ Fonction de rendu trouv√©e');
    
    // Tester avec des props par d√©faut
    const testProps = {
      variant: 'gradient-wave',
      title: 'Test Hero V3',
      subtitle: 'Ceci est un test',
      layout: 'center',
      height: 'large'
    };
    
    console.log('- Props de test:', testProps);
    
    try {
      const result = heroRenderFn(testProps);
      console.log('- Type du r√©sultat:', typeof result);
      
      if (typeof result === 'object') {
        console.log('‚úÖ R√©sultat est un objet');
        console.log('- Propri√©t√©s:', Object.keys(result));
        console.log('- HTML pr√©sent:', !!result.html);
        console.log('- CSS pr√©sent:', !!result.css);
        console.log('- JS pr√©sent:', !!result.js);
        
        if (result.html) {
          console.log('- D√©but du HTML:', result.html.substring(0, 100) + '...');
        }
        
        if (result.errors && result.errors.length > 0) {
          console.log('‚ö†Ô∏è Erreurs d√©tect√©es:', result.errors);
        }
      } else if (typeof result === 'string') {
        console.log('‚ö†Ô∏è R√©sultat est une string (pas normal pour V3)');
        console.log('- D√©but:', result.substring(0, 100) + '...');
      } else {
        console.log('‚ùå Type de r√©sultat inattendu:', typeof result);
      }
    } catch (error) {
      console.log('‚ùå Erreur lors du rendu:', error.message);
      console.log('Stack:', error.stack);
    }
  }
  
  // V√©rifier aussi la d√©finition du bloc
  console.log('\n2. V√©rification de la d√©finition du bloc:');
  const heroBlock = getBlockById('hero-v3-perfect');
  
  if (heroBlock) {
    console.log('‚úÖ Bloc trouv√© dans le registry');
    console.log('- Nom:', heroBlock.block.name);
    console.log('- Props disponibles:', heroBlock.block.props ? heroBlock.block.props.length : 'undefined');
    console.log('- DefaultProps:', Object.keys(heroBlock.block.defaultProps || {}));
  } else {
    console.log('‚ùå Bloc non trouv√© dans le registry');
  }
  
  // Tester tous les blocs V3
  console.log('\n3. Test de tous les blocs V3:');
  const v3Blocks = [
    'hero-v3-perfect',
    'features-v3-perfect', 
    'services-v3-perfect',
    'gallery-v3-perfect',
    'content-v3-perfect',
    'testimonials-v3-perfect',
    'pricing-v3-perfect',
    'faq-v3-perfect',
    'cta-v3-perfect',
    'contact-v3-perfect'
  ];
  
  for (const blockId of v3Blocks) {
    const renderFn = getBlockRenderFunction(blockId);
    const blockDef = getBlockById(blockId);
    
    console.log(`\n${blockId}:`);
    console.log('- Render function:', renderFn ? '‚úÖ' : '‚ùå');
    console.log('- Block definition:', blockDef ? '‚úÖ' : '‚ùå');
    
    if (renderFn && blockDef) {
      try {
        // Utiliser les defaultProps du bloc
        const props = blockDef.block.defaultProps || {};
        const result = renderFn(props);
        
        if (typeof result === 'object' && result.html) {
          console.log('- Rendu r√©ussi ‚úÖ');
        } else {
          console.log('- Probl√®me de rendu ‚ö†Ô∏è');
        }
      } catch (error) {
        console.log('- Erreur de rendu ‚ùå:', error.message);
      }
    }
  }
  
} catch (error) {
  console.error('\n‚ùå Erreur g√©n√©rale:', error);
  console.error('Stack:', error.stack);
}