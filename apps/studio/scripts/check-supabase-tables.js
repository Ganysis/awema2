#!/usr/bin/env node

/**
 * Script pour v√©rifier les tables existantes dans Supabase
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

async function checkTables() {
  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceKey) {
    console.error('‚ùå Variables d\'environnement manquantes');
    console.error('NEXT_PUBLIC_SUPABASE_URL:', !!supabaseUrl);
    console.error('SUPABASE_SERVICE_KEY:', !!supabaseServiceKey);
    process.exit(1);
  }

  console.log('üîç V√©rification des tables Supabase...');
  console.log('URL:', supabaseUrl);
  console.log('');

  const supabase = createClient(supabaseUrl, supabaseServiceKey);

  // Liste des tables √† v√©rifier
  const tablesToCheck = [
    // Tables sans pr√©fixe (schema supabase-tables.sql)
    'sites',
    'cms_users',
    'content',
    'media',
    'content_versions',
    'form_submissions',
    'analytics_events',
    'api_tokens',
    'cache_entries',
    
    // Tables avec pr√©fixe cms_ (schema setup-supabase-production.sql)
    'cms_sites',
    'cms_content',
    'cms_media',
    'cms_versions',
    'cms_sessions',
    'cms_audit_logs',
    'cms_backups',
    'cms_form_submissions'
  ];

  console.log('üìã V√©rification de', tablesToCheck.length, 'tables possibles...\n');

  const existingTables = [];
  const missingTables = [];

  for (const table of tablesToCheck) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        if (error.message.includes('relation') && error.message.includes('does not exist')) {
          missingTables.push(table);
          console.log(`‚ùå ${table} - N'existe pas`);
        } else {
          console.log(`‚ö†Ô∏è  ${table} - Erreur: ${error.message}`);
        }
      } else {
        existingTables.push(table);
        console.log(`‚úÖ ${table} - Existe`);
      }
    } catch (err) {
      console.log(`‚ùå ${table} - Exception: ${err.message}`);
      missingTables.push(table);
    }
  }

  console.log('\nüìä R√©sum√©:');
  console.log(`- Tables existantes: ${existingTables.length}`);
  console.log(`- Tables manquantes: ${missingTables.length}`);

  if (existingTables.length > 0) {
    console.log('\n‚úÖ Tables trouv√©es:');
    existingTables.forEach(t => console.log(`   - ${t}`));
  }

  if (missingTables.length > 0) {
    console.log('\n‚ùå Tables manquantes:');
    missingTables.forEach(t => console.log(`   - ${t}`));
  }

  // D√©terminer quelle convention est utilis√©e
  console.log('\nüîç Analyse de la convention utilis√©e:');
  
  const hasCmsPrefix = existingTables.some(t => t.startsWith('cms_') && t !== 'cms_users');
  const hasNoPrefix = existingTables.some(t => ['sites', 'content', 'media'].includes(t));

  if (hasCmsPrefix && !hasNoPrefix) {
    console.log('üìå Convention d√©tect√©e: Tables avec pr√©fixe cms_ (setup-supabase-production.sql)');
    console.log('   ‚û°Ô∏è  Utilisez les noms: cms_sites, cms_content, cms_media, etc.');
  } else if (hasNoPrefix && !hasCmsPrefix) {
    console.log('üìå Convention d√©tect√©e: Tables sans pr√©fixe (supabase-tables.sql)');
    console.log('   ‚û°Ô∏è  Utilisez les noms: sites, content, media, etc.');
  } else if (existingTables.length === 0) {
    console.log('‚ö†Ô∏è  Aucune table CMS trouv√©e!');
    console.log('   ‚û°Ô∏è  Ex√©cutez d\'abord un des scripts SQL:');
    console.log('      - scripts/setup-supabase-production.sql (recommand√©)');
    console.log('      - lib/db/schema/supabase-tables.sql');
  } else {
    console.log('‚ö†Ô∏è  Convention mixte d√©tect√©e - cela peut causer des probl√®mes');
  }
}

checkTables().catch(console.error);