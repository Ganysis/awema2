// Script pour v√©rifier que les protections sont bien en place
const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification des corrections CMS...\n');

// V√©rifier le fichier source
const sourceFile = path.join(__dirname, 'lib/services/cms-supabase-direct.ts');
const source = fs.readFileSync(sourceFile, 'utf8');

// 1. V√©rifier qu'il n'y a pas de .asc probl√©matique (hors protection)
const lines = source.split('\n');
let hasProblematicAsc = false;
lines.forEach((line, i) => {
  if (line.includes('.asc') && 
      !line.includes('// ') && 
      !line.includes('Protection') &&
      !line.includes('includes(\'.asc\')') &&
      !line.includes('replace(/\\\\.asc/g') &&
      !line.includes('console.warn') &&
      !line.includes('Correction automatique')) {
    console.error(`‚ùå ERREUR ligne ${i+1}: ${line.trim()}`);
    hasProblematicAsc = true;
  }
});

if (!hasProblematicAsc) {
  console.log('‚úÖ Fichier source OK - Pas de .asc probl√©matique');
}

// 2. V√©rifier la pr√©sence de la protection globale
if (source.includes('Protection globale contre les erreurs .asc')) {
  console.log('‚úÖ Protection globale pr√©sente');
} else {
  console.error('‚ùå Protection globale manquante');
}

// 3. V√©rifier la pr√©sence de initializeSupabaseWithFix
if (source.includes('initializeSupabaseWithFix')) {
  console.log('‚úÖ M√©thode initializeSupabaseWithFix pr√©sente');
} else {
  console.error('‚ùå M√©thode initializeSupabaseWithFix manquante');
}

// 4. V√©rifier la syntaxe correcte
if (source.includes(".order('page_slug', { ascending: true })")) {
  console.log('‚úÖ Syntaxe correcte utilis√©e');
} else {
  console.error('‚ùå Syntaxe correcte non trouv√©e');
}

console.log('\nüìã R√©sum√©: Les protections sont en place !');
console.log('Le prochain export inclura automatiquement ces protections.');