#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * G√âN√âRATEUR DE MOCKUP COMPLET
 *
 * G√©n√®re automatiquement un site complet pour un m√©tier
 * avec images professionnelles et contenu adapt√©
 */

// Importer les modules n√©cessaires
const { UniversalTemplateMapper, TEMPLATES, METIERS_CONFIG } = require('./universal-template-mapper.cjs');
const { ContentCleaner, CONTENU_METIERS } = require('./content-cleaner.cjs');

// ===================================================
// G√âN√âRATEUR DE MOCKUP
// ===================================================

class MockupGenerator {
  constructor(options) {
    this.options = {
      template: options.template || 'nextspace',
      metier: options.metier || 'plombier',
      nomEntreprise: options.nomEntreprise || 'Dupont',
      ville: options.ville || 'Paris',
      telephone: options.telephone || '01 23 45 67 89',
      email: options.email || null,
      outputPath: options.outputPath || null
    };

    // V√©rifier les param√®tres
    if (!TEMPLATES[this.options.template]) {
      throw new Error(`Template inconnu: ${this.options.template}`);
    }
    if (!METIERS_CONFIG[this.options.metier]) {
      throw new Error(`M√©tier inconnu: ${this.options.metier}`);
    }
  }

  /**
   * G√©n√®re le mockup complet
   */
  async generate() {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üöÄ G√âN√âRATION DE MOCKUP PROFESSIONNEL          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
`);

    console.log(`üìã Configuration :
  ‚Ä¢ Template : ${this.options.template}
  ‚Ä¢ M√©tier : ${this.options.metier}
  ‚Ä¢ Entreprise : ${this.options.nomEntreprise}
  ‚Ä¢ Ville : ${this.options.ville}
  ‚Ä¢ T√©l√©phone : ${this.options.telephone}
`);

    // 1. Transformer le template avec le mapper universel
    console.log('üì¶ √âtape 1/3 : Transformation du template...');
    const mapper = new UniversalTemplateMapper(
      this.options.template,
      this.options.metier,
      this.options
    );
    await mapper.transform();

    // 2. Nettoyer le contenu avec le content cleaner
    console.log('\nüìù √âtape 2/3 : Nettoyage du contenu...');
    const templatePath = TEMPLATES[this.options.template].path;
    const cleaner = new ContentCleaner(
      this.options.metier,
      templatePath,
      this.options
    );
    await cleaner.cleanAll();

    // 3. G√©n√©rer les images professionnelles
    console.log('\nüñºÔ∏è √âtape 3/3 : G√©n√©ration des images...');
    await this.generateProfessionalImages();

    // 4. Si outputPath sp√©cifi√©, copier le r√©sultat
    if (this.options.outputPath) {
      await this.copyToOutput();
    }

    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   ‚úÖ MOCKUP G√âN√âR√â AVEC SUCC√àS !                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üåê Accessible sur : http://localhost:4330
üìÅ Chemin : ${templatePath}

Contenu g√©n√©r√© :
  ‚úì Logo personnalis√© avec couleur ${METIERS_CONFIG[this.options.metier].couleur}
  ‚úì 6 services professionnels
  ‚úì Contenu adapt√© au m√©tier
  ‚úì T√©moignages et FAQ
  ‚úì Images placeholders th√©matiques

Pour d√©marrer le serveur :
  cd ${templatePath}
  npm run dev
`);
  }

  /**
   * G√©n√®re des images professionnelles
   */
  async generateProfessionalImages() {
    const templatePath = TEMPLATES[this.options.template].path;
    const imagesPath = path.join(templatePath, 'public/images');
    const metierConfig = METIERS_CONFIG[this.options.metier];

    // Cr√©er des images SVG de haute qualit√©
    const images = [
      'banner', 'service-1', 'service-2', 'service-3',
      'service-4', 'service-5', 'service-6',
      'gallery-1', 'gallery-2', 'gallery-3',
      'gallery-4', 'gallery-5', 'gallery-6',
      'project-1', 'project-2', 'project-3',
      'project-4', 'project-5', 'project-6', 'project-7'
    ];

    images.forEach((imageName, index) => {
      const isService = imageName.startsWith('service');
      const isGallery = imageName.startsWith('gallery');
      const isProject = imageName.startsWith('project');
      const isBanner = imageName === 'banner';

      let title = '';
      let subtitle = '';
      let width = 600;
      let height = 400;

      if (isBanner) {
        width = 1920;
        height = 600;
        title = `${metierConfig.nom} ${this.options.nomEntreprise}`;
        subtitle = `${metierConfig.slogan} ‚Ä¢ ${this.options.ville}`;
      } else if (isService) {
        const serviceIndex = parseInt(imageName.split('-')[1]) - 1;
        const service = metierConfig.services[serviceIndex];
        if (service) {
          title = service.title;
          subtitle = service.desc;
        }
      } else if (isGallery) {
        const galleryIndex = parseInt(imageName.split('-')[1]);
        title = `R√©alisation ${galleryIndex}`;
        subtitle = `${this.options.ville}`;
      } else if (isProject) {
        const projectIndex = parseInt(imageName.split('-')[1]);
        title = `Projet ${projectIndex}`;
        subtitle = `Client satisfait ‚Ä¢ ${this.options.ville}`;
      }

      const svg = this.generateHighQualitySVG(
        width,
        height,
        title,
        subtitle,
        metierConfig.couleur,
        metierConfig.icone
      );

      const imagePath = path.join(imagesPath, `${imageName}.svg`);
      fs.writeFileSync(imagePath, svg);
    });

    console.log(`  ‚úì ${images.length} images g√©n√©r√©es`);
  }

  /**
   * G√©n√®re un SVG de haute qualit√©
   */
  generateHighQualitySVG(width, height, title, subtitle, color, icon) {
    const secondaryColor = this.adjustColor(color, 0.8);
    const tertiaryColor = this.adjustColor(color, 0.6);

    return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- Gradient principal -->
    <linearGradient id="bg-gradient" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:${color};stop-opacity:0.95" />
      <stop offset="50%" style="stop-color:${secondaryColor};stop-opacity:0.9" />
      <stop offset="100%" style="stop-color:${tertiaryColor};stop-opacity:0.85" />
    </linearGradient>

    <!-- Pattern d√©coratif -->
    <pattern id="pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">
      <circle cx="50" cy="50" r="40" fill="white" opacity="0.03"/>
      <circle cx="0" cy="0" r="40" fill="white" opacity="0.03"/>
      <circle cx="100" cy="0" r="40" fill="white" opacity="0.03"/>
      <circle cx="0" cy="100" r="40" fill="white" opacity="0.03"/>
      <circle cx="100" cy="100" r="40" fill="white" opacity="0.03"/>
    </pattern>

    <!-- Ombre port√©e -->
    <filter id="shadow">
      <feGaussianBlur in="SourceAlpha" stdDeviation="3"/>
      <feOffset dx="2" dy="2" result="offsetblur"/>
      <feComponentTransfer>
        <feFuncA type="linear" slope="0.3"/>
      </feComponentTransfer>
      <feMerge>
        <feMergeNode/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>

  <!-- Fond avec gradient -->
  <rect width="${width}" height="${height}" fill="url(#bg-gradient)"/>

  <!-- Pattern overlay -->
  <rect width="${width}" height="${height}" fill="url(#pattern)"/>

  <!-- Cercle d√©coratif central -->
  <circle cx="${width/2}" cy="${height/2}" r="${Math.min(width, height) * 0.35}"
          fill="white" opacity="0.05"/>

  <!-- Ic√¥ne -->
  <text x="${width/2}" y="${height/2 - 40}"
        font-family="Arial, sans-serif" font-size="${Math.min(width, height) * 0.15}"
        fill="white" text-anchor="middle" opacity="0.3">
    ${icon}
  </text>

  <!-- Titre principal -->
  <text x="${width/2}" y="${height/2 + 10}"
        font-family="Arial, sans-serif" font-size="${Math.min(width, height) * 0.08}"
        font-weight="bold" fill="white" text-anchor="middle" filter="url(#shadow)">
    ${title}
  </text>

  <!-- Sous-titre -->
  ${subtitle ? `<text x="${width/2}" y="${height/2 + 50}"
        font-family="Arial, sans-serif" font-size="${Math.min(width, height) * 0.04}"
        fill="white" text-anchor="middle" opacity="0.9">
    ${subtitle}
  </text>` : ''}

  <!-- Bordure √©l√©gante -->
  <rect x="10" y="10" width="${width-20}" height="${height-20}"
        stroke="white" stroke-width="1" fill="none" opacity="0.1" rx="5"/>
</svg>`;
  }

  /**
   * Ajuste la luminosit√© d'une couleur
   */
  adjustColor(color, factor) {
    const hex = color.replace('#', '');
    const r = parseInt(hex.substr(0, 2), 16);
    const g = parseInt(hex.substr(2, 2), 16);
    const b = parseInt(hex.substr(4, 2), 16);

    const newR = Math.round(Math.min(255, r + (255 - r) * (1 - factor)));
    const newG = Math.round(Math.min(255, g + (255 - g) * (1 - factor)));
    const newB = Math.round(Math.min(255, b + (255 - b) * (1 - factor)));

    return `#${newR.toString(16).padStart(2, '0')}${newG.toString(16).padStart(2, '0')}${newB.toString(16).padStart(2, '0')}`;
  }

  /**
   * Copie le r√©sultat vers le dossier de sortie
   */
  async copyToOutput() {
    if (!this.options.outputPath) return;

    const source = TEMPLATES[this.options.template].path;
    const dest = this.options.outputPath;

    console.log(`\nüìÇ Copie vers ${dest}...`);

    // Cr√©er le dossier de destination
    if (!fs.existsSync(dest)) {
      fs.mkdirSync(dest, { recursive: true });
    }

    // Copier les fichiers
    execSync(`cp -r ${source}/* ${dest}/`, { stdio: 'ignore' });

    console.log('  ‚úì Fichiers copi√©s');
  }
}

// ===================================================
// CLI
// ===================================================

if (require.main === module) {
  const args = process.argv.slice(2);
  const options = {};

  args.forEach(arg => {
    const [key, value] = arg.split('=');
    options[key.replace('--', '')] = value;
  });

  if (!options.metier) {
    console.log(`
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë   üé® G√âN√âRATEUR DE MOCKUP PROFESSIONNEL         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Usage : node mockup-generator-complete.cjs --metier=plombier --nom=Martin --ville=Lyon

Options :
  --template   : nextspace, bexer, cleaner (d√©faut: nextspace)
  --metier     : plombier, electricien, menuisier, paysagiste (REQUIS)
  --nom        : Nom de l'entreprise (d√©faut: Dupont)
  --ville      : Ville (d√©faut: Paris)
  --telephone  : T√©l√©phone (d√©faut: 01 23 45 67 89)
  --email      : Email (optionnel)
  --output     : Dossier de sortie (optionnel)

Exemples :
  node mockup-generator-complete.cjs --metier=plombier --nom=AquaPro --ville=Lyon
  node mockup-generator-complete.cjs --template=bexer --metier=electricien --nom=Volt+
  node mockup-generator-complete.cjs --metier=menuisier --output=/tmp/mockup

Ce g√©n√©rateur cr√©e :
  ‚úÖ Logo personnalis√© avec couleur du m√©tier
  ‚úÖ Images professionnelles (SVG haute qualit√©)
  ‚úÖ Contenu 100% adapt√© (z√©ro Lorem Ipsum)
  ‚úÖ Services, t√©moignages, FAQ r√©els
  ‚úÖ Configuration compl√®te

Templates disponibles :
  ‚Ä¢ nextspace : Portfolio moderne (port 4330)
  ‚Ä¢ bexer : Business multilingue
  ‚Ä¢ cleaner : Services professionnels

M√©tiers disponibles :
  ‚Ä¢ plombier : Plomberie (bleu)
  ‚Ä¢ electricien : √âlectricit√© (orange)
  ‚Ä¢ menuisier : Menuiserie (marron)
  ‚Ä¢ paysagiste : Paysagiste (vert)
`);
    process.exit(0);
  }

  const generator = new MockupGenerator({
    template: options.template,
    metier: options.metier,
    nomEntreprise: options.nom,
    ville: options.ville,
    telephone: options.telephone,
    email: options.email,
    outputPath: options.output
  });

  generator.generate().catch(console.error);
}

module.exports = { MockupGenerator };