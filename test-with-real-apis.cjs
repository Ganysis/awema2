#!/usr/bin/env node

/**
 * üß™ Test AWEMA avec les APIs disponibles
 *
 * APIs configur√©es :
 * - ‚úÖ Supabase (stockage)
 * - ‚úÖ DeepSeek AI (g√©n√©ration contenu)
 * - ‚ùå Netlify (mockups) - √Ä configurer
 * - ‚ùå Email - √Ä configurer
 * - ‚ùå Sanity - √Ä configurer
 * - ‚ùå Cloudflare - √Ä configurer
 */

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
require('dotenv').config({ path: './apps/studio/.env.local' });

const TEST_CONFIG = {
  client: {
    businessName: 'Plomberie Excellence Lyon',
    businessType: 'plombier',
    email: 'test@plomberie-excellence.fr',
    phone: '04 78 56 78 90',
    location: 'Lyon 3√®me',
    description: 'Votre expert plombier depuis 1998',
    services: [
      'D√©pannage urgent 24/7',
      'Installation sanitaire',
      'R√©novation salle de bain',
      'D√©tection de fuites',
      'Entretien chaudi√®re'
    ]
  }
};

console.log('üöÄ AWEMA 3.0 - Test avec APIs R√©elles\n');
console.log('====================================');
console.log('APIs disponibles :');
console.log('‚úÖ Supabase :', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'Configur√©' : 'Manquant');
console.log('‚úÖ DeepSeek :', process.env.DEEPSEEK_API_KEY ? 'Configur√©' : 'Manquant');
console.log('‚ùå Netlify  :', process.env.NETLIFY_API_TOKEN === 'TODO_ADD_YOUR_TOKEN' ? '√Ä configurer' : 'OK');
console.log('‚ùå Email    :', process.env.RESEND_API_KEY === 'TODO_ADD_YOUR_KEY' ? '√Ä configurer' : 'OK');
console.log('====================================\n');

// Test 1 : Supabase
async function testSupabase() {
  console.log('\nüìä TEST 1 : Supabase Database');
  console.log('--------------------------------');

  try {
    // Tester la connexion
    const response = await fetch(
      `${process.env.NEXT_PUBLIC_SUPABASE_URL}/rest/v1/`,
      {
        headers: {
          'apikey': process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
          'Authorization': `Bearer ${process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY}`
        }
      }
    );

    if (response.ok) {
      console.log('‚úÖ Connexion Supabase OK');
      console.log('   URL:', process.env.NEXT_PUBLIC_SUPABASE_URL);
    } else {
      console.log('‚ùå Erreur Supabase:', response.status);
    }
  } catch (error) {
    console.log('‚ùå Erreur connexion Supabase:', error.message);
  }
}

// Test 2 : DeepSeek AI
async function testDeepSeek() {
  console.log('\nü§ñ TEST 2 : DeepSeek AI');
  console.log('--------------------------------');

  try {
    console.log('G√©n√©ration de contenu pour:', TEST_CONFIG.client.businessName);

    const prompt = `
      G√©n√®re un texte de pr√©sentation professionnel pour une entreprise de plomberie.
      Nom: ${TEST_CONFIG.client.businessName}
      Ville: ${TEST_CONFIG.client.location}
      Services: ${TEST_CONFIG.client.services.join(', ')}

      Le texte doit faire environ 150 mots, √™tre engageant et professionnel.
      Mets en avant l'expertise locale et la disponibilit√© 24/7.
    `;

    const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`
      },
      body: JSON.stringify({
        model: 'deepseek-chat',
        messages: [
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 500
      })
    });

    if (response.ok) {
      const data = await response.json();
      const content = data.choices[0].message.content;

      console.log('‚úÖ G√©n√©ration DeepSeek r√©ussie !');
      console.log('\nüìù Contenu g√©n√©r√© :');
      console.log('-------------------');
      console.log(content);
      console.log('-------------------');
      console.log(`\nNombre de mots : ${content.split(' ').length}`);
      console.log(`Tokens utilis√©s : ${data.usage.total_tokens}`);
      console.log(`Co√ªt estim√© : ~$${(data.usage.total_tokens * 0.00014 / 1000).toFixed(6)}`);
    } else {
      const error = await response.text();
      console.log('‚ùå Erreur DeepSeek:', error);
    }
  } catch (error) {
    console.log('‚ùå Erreur appel DeepSeek:', error.message);
  }
}

// Test 3 : Workflow simul√© avec les APIs disponibles
async function testWorkflow() {
  console.log('\nüîÑ TEST 3 : Workflow avec APIs disponibles');
  console.log('--------------------------------------------');

  // √âtape 1 : Sauvegarder en Supabase
  console.log('\n1Ô∏è‚É£  Sauvegarde client en base...');
  // Simul√© car tables pas encore cr√©√©es
  console.log('   ‚è≠Ô∏è  Simul√© (tables √† cr√©er)');

  // √âtape 2 : G√©n√©ration mockups
  console.log('\n2Ô∏è‚É£  G√©n√©ration mockups Netlify...');
  if (process.env.NETLIFY_API_TOKEN === 'TODO_ADD_YOUR_TOKEN') {
    console.log('   ‚è≠Ô∏è  Simul√© (Netlify non configur√©)');
    console.log('   üì¶ Mockups simul√©s :');
    console.log('      - sydney-mock.netlify.app');
    console.log('      - nextspace-mock.netlify.app');
  }

  // √âtape 3 : Envoi email
  console.log('\n3Ô∏è‚É£  Envoi email propositions...');
  console.log('   ‚è≠Ô∏è  Simul√© (Email non configur√©)');

  // √âtape 4 : Enrichissement IA
  console.log('\n4Ô∏è‚É£  Enrichissement contenu avec DeepSeek...');
  console.log('   ‚úÖ API DeepSeek disponible et fonctionnelle !');

  // √âtape 5 : D√©ploiement
  console.log('\n5Ô∏è‚É£  D√©ploiement Cloudflare...');
  console.log('   ‚è≠Ô∏è  Simul√© (Cloudflare non configur√©)');
}

// Fonction principale
async function main() {
  await testSupabase();
  await testDeepSeek();
  await testWorkflow();

  console.log('\n====================================');
  console.log('üìä R√âSUM√â DES TESTS');
  console.log('====================================');
  console.log('‚úÖ Supabase : Pr√™t pour stockage');
  console.log('‚úÖ DeepSeek : Pr√™t pour enrichissement IA');
  console.log('‚è≥ Netlify  : √Ä configurer pour mockups');
  console.log('‚è≥ Email    : √Ä configurer pour notifications');
  console.log('‚è≥ Sanity   : √Ä configurer pour CMS');
  console.log('‚è≥ Cloudflare : √Ä configurer pour production');

  console.log('\nüí° PROCHAINES √âTAPES :');
  console.log('1. Obtenir token Netlify sur app.netlify.com');
  console.log('2. Cr√©er compte Brevo/Resend pour emails');
  console.log('3. Cr√©er projet Sanity pour CMS');
  console.log('4. Configurer Cloudflare Pages');
  console.log('\nAvec ces 4 services, le workflow sera 100% op√©rationnel !');
}

// Lancer les tests
main().catch(console.error);