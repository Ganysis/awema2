#!/usr/bin/env node

/**
 * üß™ Test Simple du Workflow AWEMA - Sans API Externes
 *
 * Ce script teste le workflow en mode simulation
 * pour v√©rifier que tout est correctement int√©gr√©
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration de test
const TEST_CONFIG = {
  client: {
    businessName: 'Plomberie Test Lyon',
    businessType: 'plombier',
    email: 'test@plomberie-lyon.fr',
    phone: '04 78 12 34 56',
    location: 'Lyon 7√®me',
    description: 'Expert en plomberie depuis 20 ans',
    services: [
      'D√©pannage urgence 24/7',
      'Installation sanitaire',
      'R√©novation salle de bain'
    ]
  },
  mockMode: true // Mode simulation sans API externes
};

console.log('üöÄ AWEMA 3.0 - Test du Workflow\n');
console.log('====================================');
console.log('Mode : SIMULATION (sans API externes)');
console.log('Client test :', TEST_CONFIG.client.businessName);
console.log('====================================\n');

// √âtape 1 : V√©rifier la structure du projet
console.log('üìÅ V√©rification de la structure...');
const requiredDirs = [
  'src/pages',
  'src/content',
  'src/layouts',
  'public/images'
];

let allDirsExist = true;
for (const dir of requiredDirs) {
  const fullPath = path.join(__dirname, dir);
  if (fs.existsSync(fullPath)) {
    console.log(`  ‚úÖ ${dir}`);
  } else {
    console.log(`  ‚ùå ${dir} manquant`);
    allDirsExist = false;
  }
}

if (!allDirsExist) {
  console.log('\n‚ö†Ô∏è  Certains dossiers sont manquants');
}

// √âtape 2 : Tester la g√©n√©ration de contenu
console.log('\nüìù Test de g√©n√©ration de contenu...');

const generateSiteScript = path.join(__dirname, 'generate-site-metier-complet.cjs');
if (fs.existsSync(generateSiteScript)) {
  console.log('  ‚úÖ Script de g√©n√©ration trouv√©');

  try {
    // Ex√©cuter le script en mode test
    console.log('  üîÑ G√©n√©ration pour m√©tier : plombier');
    execSync(`node ${generateSiteScript} plombier`, {
      stdio: 'pipe',
      env: { ...process.env, TEST_MODE: 'true' }
    });
    console.log('  ‚úÖ G√©n√©ration r√©ussie');
  } catch (error) {
    console.log('  ‚ö†Ô∏è  Erreur lors de la g√©n√©ration:', error.message);
  }
} else {
  console.log('  ‚ùå Script de g√©n√©ration introuvable');
}

// √âtape 3 : V√©rifier les contenus g√©n√©r√©s
console.log('\nüìÑ V√©rification des contenus...');

const contentFiles = [
  'src/content/homepage/-index.md',
  'src/content/about/-index.md',
  'src/content/services/-index.md'
];

for (const file of contentFiles) {
  const fullPath = path.join(__dirname, file);
  if (fs.existsSync(fullPath)) {
    const content = fs.readFileSync(fullPath, 'utf-8');
    const hasPlumber = content.toLowerCase().includes('plomb');
    console.log(`  ${hasPlumber ? '‚úÖ' : '‚ö†Ô∏è '} ${file} ${hasPlumber ? '(contenu plombier d√©tect√©)' : ''}`);
  } else {
    console.log(`  ‚ö†Ô∏è  ${file} introuvable`);
  }
}

// √âtape 4 : Simuler les agents
console.log('\nü§ñ Simulation des Agents...');

// Agent 3 - Mockups
console.log('\n[Agent 3] G√©n√©ration Mockups');
console.log('  üì¶ Simulation : 3 mockups g√©n√©r√©s');
console.log('  - sydney-mock.netlify.app');
console.log('  - nextspace-mock.netlify.app');
console.log('  - locomotive-mock.netlify.app');

// Agent 5 - Email
console.log('\n[Agent 5] Envoi Email');
console.log('  üìß Simulation : Email envoy√© √†', TEST_CONFIG.client.email);

// Agent 4 - S√©lection
console.log('\n[Agent 4] S√©lection Client');
console.log('  üëÜ Simulation : Client choisit "sydney"');

// Agent 6 - Sanity
console.log('\n[Agent 6] Setup Sanity CMS');
console.log('  üìù Simulation : Projet Sanity configur√©');
console.log('  - Project ID: plomberie-test-lyon');
console.log('  - Studio URL: https://plomberie-test.sanity.studio');

// Agent 7 - Enrichissement
console.log('\n[Agent 7] Enrichissement IA');
console.log('  ü§ñ Simulation : Contenu enrichi (1000+ mots/page)');

// Agent 8 - D√©ploiement
console.log('\n[Agent 8] D√©ploiement Cloudflare');
console.log('  ‚òÅÔ∏è  Simulation : Site d√©ploy√©');
console.log('  - URL: https://plomberie-test.awema.fr');

// R√©sum√© final
console.log('\n====================================');
console.log('‚úÖ TEST TERMIN√â AVEC SUCC√àS');
console.log('====================================\n');

console.log('üìä R√©sum√© :');
console.log('  - Workflow ID : workflow-' + Date.now());
console.log('  - Temps total : 5 minutes (simul√©)');
console.log('  - Site final : https://plomberie-test.awema.fr');
console.log('  - CMS : https://plomberie-test.sanity.studio\n');

// Test du serveur Astro
console.log('üí° Pour tester le site g√©n√©r√© :\n');
console.log('  npm run dev');
console.log('  # Puis ouvrir http://localhost:4321\n');

// Instructions pour test r√©el
console.log('üöÄ Pour un test R√âEL avec APIs :\n');
console.log('  1. Configurer les cl√©s API dans .env.local :');
console.log('     - NETLIFY_API_TOKEN');
console.log('     - BREVO_API_KEY');
console.log('     - SANITY_MANAGEMENT_TOKEN');
console.log('     - DEEPSEEK_API_KEY');
console.log('     - CLOUDFLARE_API_TOKEN\n');
console.log('  2. Lancer : node test-workflow-real.js\n');

process.exit(0);