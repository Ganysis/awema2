---
export interface Props {
  minVisitors?: number;
  maxVisitors?: number;
  updateInterval?: number;
}

const {
  minVisitors = 12,
  maxVisitors = 23,
  updateInterval = 30000
} = Astro.props;
---

<div id="visitor-counter" class="visitor-counter">
  <div class="visitor-dot"></div>
  <div class="visitor-content">
    <div class="visitor-icon">
      <svg width="16" height="16" viewBox="0 0 20 20" fill="currentColor">
        <path d="M9 6a3 3 0 11-6 0 3 3 0 016 0zM17 6a3 3 0 11-6 0 3 3 0 016 0zM12.93 17c.046-.327.07-.66.07-1a6.97 6.97 0 00-1.5-4.33A5 5 0 0119 16v1h-6.07zM6 11a5 5 0 015 5v1H1v-1a5 5 0 015-5z"/>
      </svg>
    </div>
    <div class="visitor-text">
      <span id="visitor-count">--</span>
      <span>personnes regardent cette page</span>
    </div>
  </div>
</div>

<style>
  .visitor-counter {
    position: fixed;
    bottom: 2rem;
    left: 2rem;
    background: white;
    border-radius: 12px;
    padding: 0.75rem 1rem;
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
    border: 1px solid rgba(0, 0, 0, 0.05);
    z-index: 1000;
    animation: slideInLeft 0.5s ease;
    transition: all 0.3s ease;
    max-width: 250px;
  }

  .visitor-counter:hover {
    transform: translateX(5px) scale(1.02);
    box-shadow: 0 20px 40px -10px rgba(0, 0, 0, 0.15);
  }

  .visitor-dot {
    position: absolute;
    top: -4px;
    right: -4px;
    width: 12px;
    height: 12px;
    background: #10b981;
    border-radius: 50%;
    border: 2px solid white;
    animation: pulse-dot 2s ease infinite;
  }

  .visitor-content {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .visitor-icon {
    flex-shrink: 0;
    color: #10b981;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
    background: #d1fae5;
    border-radius: 8px;
  }

  .visitor-text {
    font-size: 0.875rem;
    color: #374151;
    line-height: 1.3;
  }

  #visitor-count {
    font-weight: 700;
    color: #111827;
    margin-right: 0.25rem;
    font-size: 1rem;
    display: inline-block;
    min-width: 20px;
    transition: all 0.3s ease;
  }

  #visitor-count.updating {
    animation: countUpdate 0.5s ease;
  }

  @keyframes slideInLeft {
    from {
      transform: translateX(-100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes pulse-dot {
    0%, 100% {
      transform: scale(1);
      opacity: 1;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.7;
    }
  }

  @keyframes countUpdate {
    0% { transform: scale(1); }
    50% { transform: scale(1.2); }
    100% { transform: scale(1); }
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .visitor-counter {
      bottom: 1rem;
      left: 1rem;
      right: auto;
      padding: 0.5rem 0.75rem;
      max-width: 200px;
    }

    .visitor-text {
      font-size: 0.75rem;
    }

    #visitor-count {
      font-size: 0.875rem;
    }

    .visitor-icon {
      width: 28px;
      height: 28px;
    }

    .visitor-icon svg {
      width: 14px;
      height: 14px;
    }
  }

  /* Hide on very small screens if needed */
  @media (max-width: 380px) {
    .visitor-counter {
      display: none;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .visitor-counter {
      background: #1f2937;
      border-color: #374151;
    }

    .visitor-text {
      color: #d1d5db;
    }

    #visitor-count {
      color: #f3f4f6;
    }

    .visitor-icon {
      background: #065f46;
      color: #6ee7b7;
    }
  }
</style>

<script define:vars={{ minVisitors, maxVisitors, updateInterval }}>
  document.addEventListener('DOMContentLoaded', () => {
    const countElement = document.getElementById('visitor-count');
    let currentCount = 0;

    function getRandomCount() {
      return Math.floor(Math.random() * (maxVisitors - minVisitors + 1)) + minVisitors;
    }

    function updateCount() {
      const newCount = getRandomCount();

      // Add animation class
      countElement.classList.add('updating');

      // Animate number change
      const startCount = currentCount || newCount;
      const endCount = newCount;
      const duration = 500;
      const startTime = Date.now();

      function animate() {
        const now = Date.now();
        const progress = Math.min((now - startTime) / duration, 1);
        const easeProgress = 1 - Math.pow(1 - progress, 3); // Ease out cubic

        currentCount = Math.round(startCount + (endCount - startCount) * easeProgress);
        countElement.textContent = currentCount.toString();

        if (progress < 1) {
          requestAnimationFrame(animate);
        } else {
          countElement.classList.remove('updating');
        }
      }

      animate();
    }

    // Initial update
    updateCount();

    // Update periodically
    setInterval(updateCount, updateInterval);

    // Optional: Update when tab becomes visible
    document.addEventListener('visibilitychange', () => {
      if (!document.hidden) {
        updateCount();
      }
    });

    // Add hover effect for debugging (optional)
    const counter = document.getElementById('visitor-counter');
    counter.addEventListener('click', () => {
      updateCount();
    });
  });
</script>