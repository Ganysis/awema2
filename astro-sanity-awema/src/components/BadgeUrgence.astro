---
export interface Props {
  initialDays?: number;
  initialHours?: number;
  initialMinutes?: number;
}

const {
  initialDays = 0,
  initialHours = 23,
  initialMinutes = 59
} = Astro.props;
---

<div id="urgency-badge" class="urgency-badge">
  <div class="urgency-content">
    <span class="urgency-icon">ðŸ”¥</span>
    <span class="urgency-text">
      <strong>Offre limitÃ©e : -30%</strong> expire dans
    </span>
    <div class="urgency-countdown">
      <span id="countdown-timer">--:--:--</span>
    </div>
  </div>
</div>

<style>
  .urgency-badge {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: linear-gradient(90deg, #dc2626 0%, #f97316 50%, #dc2626 100%);
    background-size: 200% 100%;
    z-index: 9999;
    animation: gradientShift 3s ease infinite, slideDown 0.5s ease;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .urgency-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: white;
    font-size: 0.9rem;
    flex-wrap: wrap;
  }

  .urgency-icon {
    font-size: 1.25rem;
    animation: pulse 1s ease infinite;
  }

  .urgency-text {
    font-weight: 500;
  }

  .urgency-text strong {
    font-weight: 800;
  }

  .urgency-countdown {
    background-color: rgba(0, 0, 0, 0.2);
    border-radius: 6px;
    padding: 0.25rem 0.75rem;
    font-weight: 700;
    font-family: 'Monaco', 'Courier New', monospace;
    font-size: 1rem;
    backdrop-filter: blur(5px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  #countdown-timer {
    letter-spacing: 0.05em;
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  @keyframes slideDown {
    from {
      transform: translateY(-100%);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes pulse {
    0%, 100% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.1);
    }
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .urgency-content {
      font-size: 0.8rem;
      padding: 0.5rem;
      gap: 0.5rem;
    }

    .urgency-icon {
      font-size: 1rem;
    }

    .urgency-countdown {
      font-size: 0.9rem;
      padding: 0.2rem 0.5rem;
    }
  }

  /* Add space to body to prevent content overlap */
  :global(body) {
    padding-top: 50px !important;
  }

  /* Flashing effect on last minute */
  .urgency-badge.urgent {
    animation: gradientShift 1s ease infinite, flash 0.5s ease infinite;
  }

  @keyframes flash {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.7; }
  }
</style>

<script define:vars={{ initialDays, initialHours, initialMinutes }}>
  document.addEventListener('DOMContentLoaded', () => {
    const timerElement = document.getElementById('countdown-timer');
    const badgeElement = document.getElementById('urgency-badge');

    // Get or set initial countdown time
    let endTime = localStorage.getItem('offerEndTime');

    if (!endTime || new Date(endTime) <= new Date()) {
      // Set new end time
      const now = new Date();
      const end = new Date(now);
      end.setDate(end.getDate() + initialDays);
      end.setHours(end.getHours() + initialHours);
      end.setMinutes(end.getMinutes() + initialMinutes);
      endTime = end.toISOString();
      localStorage.setItem('offerEndTime', endTime);
    }

    function updateCountdown() {
      const now = new Date().getTime();
      const end = new Date(endTime).getTime();
      const distance = end - now;

      if (distance <= 0) {
        // Reset countdown
        const newEnd = new Date();
        newEnd.setDate(newEnd.getDate() + 1);
        endTime = newEnd.toISOString();
        localStorage.setItem('offerEndTime', endTime);
        return;
      }

      const days = Math.floor(distance / (1000 * 60 * 60 * 24));
      const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
      const seconds = Math.floor((distance % (1000 * 60)) / 1000);

      let displayText = '';

      if (days > 0) {
        displayText = `${days}j ${hours.toString().padStart(2, '0')}h ${minutes.toString().padStart(2, '0')}m`;
      } else if (hours > 0) {
        displayText = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      } else {
        displayText = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        // Add urgent class for last hour
        badgeElement.classList.add('urgent');
      }

      timerElement.textContent = displayText;
    }

    // Update immediately and then every second
    updateCountdown();
    setInterval(updateCountdown, 1000);

    // Optional: Add click to dismiss (stores in session)
    badgeElement.addEventListener('click', (e) => {
      if (e.target === badgeElement || e.target.classList.contains('urgency-content')) {
        // Don't hide, but could scroll to pricing or open popup
        const pricingSection = document.querySelector('#pricing');
        if (pricingSection) {
          pricingSection.scrollIntoView({ behavior: 'smooth' });
        }
      }
    });
  });
</script>