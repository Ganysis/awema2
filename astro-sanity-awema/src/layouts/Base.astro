---
import TwSizeIndicator from "@/components/TwSizeIndicator.astro";
import SEO from "@/components/SEO.astro";
import OrganizationSchema from "@/components/schemas/OrganizationSchema.astro";
import config from "@/config/config.json";
import theme from "@/config/theme.json";
import { plainify } from "@/lib/utils/textConverter";
import Footer from "@/partials/Footer.astro";
import Header from "@/partials/Header.astro";
import Integrations from "@/components/Integrations.astro";
import Analytics from "@/components/Analytics.astro";
import PerformanceMonitor from "@/components/PerformanceMonitor.astro";
import "@/styles/main.css";
// AOS désactivé pour optimiser LCP (économie 400ms main-thread)
// import "aos/dist/aos.css";
// AstroFont retiré - fonts chargées via JS async
// import { AstroFont } from "astro-font";
import { ClientRouter } from "astro:transitions";
import GotoTop from "./partials/GotoTop.astro";
import MobileCallButton from "@/components/MobileCallButton.astro";
import CookieConsent from "@/components/CookieConsent.astro";
import {
  GoogleTagmanager,
  GoogleTagmanagerNoscript,
} from "@digi4care/astro-google-tagmanager";

// font families
const pf = theme.fonts.font_family.primary;

let fontPrimary;
if (theme.fonts.font_family.primary) {
  fontPrimary = theme.fonts.font_family.primary
    .replace(/\+/g, " ")
    .replace(/:[ital,]*[ital@]*[wght@]*[0-9,;]+/gi, "");
}

// types for frontmatters
export interface Props {
  title?: string;
  meta_title?: string;
  description?: string;
  image?: string;
  noindex?: boolean;
  canonical?: string;
  schema?: any;
}

// distructure frontmatters
const { title, meta_title, description, image, noindex, canonical, schema } =
  Astro.props;
---

<!doctype html>
<html lang="fr">
  <head>
    <!-- Preconnect to critical third-party domains -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://images.unsplash.com" crossorigin />
    <link rel="dns-prefetch" href="https://www.googletagmanager.com" />
    <link rel="dns-prefetch" href="https://www.google-analytics.com" />

    <!-- Google Ads Conversion Tracking -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=AW-17628944043"></script>
    <script is:inline>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', 'AW-17628944043');
    </script>

    <!-- google tag manager -->
    {
      config.google_tag_manager.enable && (
        <GoogleTagmanager id={config.google_tag_manager.gtm_id} />
      )
    }
    <!-- favicon -->
    <link rel="shortcut icon" href={config.site.favicon} />
    <!-- theme meta -->
    <meta name="theme-name" content="awema-astro" />
    <meta name="msapplication-TileColor" content="#000000" />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: light)"
      content="#fff"
    />
    <meta
      name="theme-color"
      media="(prefers-color-scheme: dark)"
      content="#000"
    />
    <meta name="generator" content={Astro.generator} />
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />

    <!-- Google Fonts chargées APRES interaction utilisateur pour LCP maximal -->
    <script define:vars={{ pf }}>
      // Charger Google Fonts seulement après interaction ou après 2s
      let fontsLoaded = false;

      function loadGoogleFonts() {
        if (fontsLoaded) return;
        fontsLoaded = true;

        // Preconnect
        const preconnect1 = document.createElement('link');
        preconnect1.rel = 'preconnect';
        preconnect1.href = 'https://fonts.googleapis.com';
        document.head.appendChild(preconnect1);

        const preconnect2 = document.createElement('link');
        preconnect2.rel = 'preconnect';
        preconnect2.href = 'https://fonts.gstatic.com';
        preconnect2.crossOrigin = 'anonymous';
        document.head.appendChild(preconnect2);

        // Load font
        setTimeout(function() {
          const link = document.createElement('link');
          link.rel = 'stylesheet';
          link.href = `https://fonts.googleapis.com/css2?family=${pf}&display=swap`;
          document.head.appendChild(link);
        }, 50);
      }

      // Charger après interaction ou après 3s
      ['scroll', 'mousemove', 'touchstart', 'click'].forEach(event => {
        window.addEventListener(event, loadGoogleFonts, { once: true, passive: true });
      });
      setTimeout(loadGoogleFonts, 3000);
    </script>

    <!-- responsive meta -->
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1, maximum-scale=5"
    />

    <!-- SEO Component -->
    <SEO
      title={meta_title || title || config.site.title}
      description={description || config.metadata.meta_description}
      canonical={canonical}
      image={image || config.metadata.meta_image}
      noindex={noindex}
      schema={schema}
    />

    <!-- Organization Schema for all pages -->
    <OrganizationSchema />

    <!-- Critical CSS inline for above-the-fold content -->
    <style is:inline>
      /* Critical CSS for fast initial render - OPTIMISÉ POUR LCP */
      *,::after,::before{box-sizing:border-box}

      /* FORCE font-display: swap pour éliminer render delay */
      @font-face {
        font-family: 'Quicksand';
        font-display: swap;
      }

      /* Fallback font system pour affichage immédiat du texte */
      html{
        -webkit-text-size-adjust:100%;
        line-height:1.5;
        font-family:system-ui,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif!important;
      }
      body{
        margin:0;
        min-height:100vh;
        -webkit-font-smoothing:antialiased;
        font-family:system-ui,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif!important;
      }

      /* Headings avec font système immédiate - FORCE !important */
      h1,h2,h3,h4,h5,h6{
        overflow-wrap:break-word;
        font-family:system-ui,-apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Helvetica Neue',Arial,sans-serif!important;
        font-weight:700;
      }

      img,picture,video,canvas,svg{display:block;max-width:100%;height:auto}
      input,button,textarea,select{font:inherit}

      /* Layout Shift Prevention */
      img,video{aspect-ratio:attr(width) / attr(height)}

      /* Skeleton screens for loading states */
      .skeleton{animation:skeleton-loading 1s linear infinite alternate}
      @keyframes skeleton-loading{0%{background-color:#f3f4f6}100%{background-color:#e5e7eb}}
    </style>

    <ClientRouter />
  </head>
  <body>
    {/* google tag manager noscript */}
    {
      config.google_tag_manager.enable && (
        <GoogleTagmanagerNoscript id={config.google_tag_manager.gtm_id} />
      )
    }
    <TwSizeIndicator />

    <!-- Skip link pour l'accessibilité -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:z-[100] focus:px-4 focus:py-2 focus:bg-primary focus:text-white focus:rounded-lg focus:shadow-lg"
    >
      Aller au contenu principal
    </a>

    <Header />
    <main id="main-content">
      <slot />
    </main>
    <Footer />
    <GotoTop />
    <MobileCallButton />
    <CookieConsent />
    <Analytics />
    <Integrations />
    <PerformanceMonitor />

    <!-- Simplified script loading -->
    <script>
      // AOS désactivé pour optimiser LCP (économie 400-600ms main-thread)
      // import AOS from "aos";
      import { modal } from "@/lib/utils/modal";
      import { incircleInit } from "@/lib/utils/in-circle";

      // Initialize utilities only
      modal();
      incircleInit();
    </script>

    <!-- Performance monitoring -->
    <script type="module" defer>
      // Web Vitals monitoring
      if ('PerformanceObserver' in window) {
        try {
          // LCP
          const lcpObserver = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            const lastEntry = entries[entries.length - 1];
            console.log('LCP:', lastEntry.renderTime || lastEntry.loadTime);
          });
          lcpObserver.observe({ type: 'largest-contentful-paint', buffered: true });

          // CLS
          let clsValue = 0;
          const clsObserver = new PerformanceObserver((list) => {
            for (const entry of list.getEntries()) {
              if (!entry.hadRecentInput) {
                clsValue += entry.value;
              }
            }
            console.log('CLS:', clsValue);
          });
          clsObserver.observe({ type: 'layout-shift', buffered: true });

          // FID
          const fidObserver = new PerformanceObserver((list) => {
            const entries = list.getEntries();
            entries.forEach((entry) => {
              console.log('FID:', entry.processingStart - entry.startTime);
            });
          });
          fidObserver.observe({ type: 'first-input', buffered: true });
        } catch (e) {
          // Silently fail if not supported
        }
      }
    </script>
  </body>
</html>
